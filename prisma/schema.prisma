datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongoDb"]
}

model User {
  id        String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  email     String   @unique
  password  String
  name      String?
  servers   Server[]
  Vote      Vote[]
}

model Server {
  id            String      @id @default(dbgenerated()) @map("_id") @db.ObjectId
  createdAt     DateTime    @default(now())
  openingAt     DateTime?
  approved      Boolean     @default(false)
  name          String
  description   String?
  chronicle     Chronicle   @relation(fields: [chronicleId], references: [id])
  addedBy       User        @relation(fields: [addedById], references: [id])
  addedById     String      @db.ObjectId
  chronicleId   String      @db.ObjectId
  rates         ServerRates @relation(fields: [serverRatesId], references: [id])
  serverRatesId String      @db.ObjectId
  Vote          Vote[]
}

model ServerRates {
  id     String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  xp     Int
  sp     Int
  adena  Int
  drop   Int
  spoil  Int
  Server Server[]
}

model Chronicle {
  id       String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  name     String
  shortcut String?  @unique
  Server   Server[]
}

model Vote {
  id            String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  votedBy       User?    @relation(fields: [votedByUserId], references: [id])
  votedByUserId String?  @db.ObjectId
  server        Server   @relation(fields: [serverId], references: [id])
  serverId      String   @db.ObjectId
  ip            String
}
